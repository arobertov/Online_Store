<?php

namespace ShopBundle\Repository;

use Doctrine\ORM\EntityManagerInterface;
use ShopBundle\Entity\Promotion;
use Doctrine\ORM\Mapping;

/**
 * PromotionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PromotionRepository extends \Doctrine\ORM\EntityRepository
{
	/**
	 * @var EntityManagerInterface $em
	 */
	private $em;

	/**
	 * CategoryRepository constructor.
	 *
	 * @param EntityManagerInterface $em
	 */
	public function __construct( EntityManagerInterface $em ) {
		parent::__construct( $em, new Mapping\ClassMetadata(Promotion::class) );
		$this->em = $em;
	}

	/**
	 * @return mixed
	 */
	public function findAllPromotions(){
		return $this->createQueryBuilder('po')
					->leftJoin('po.products','pr')
					->leftJoin('po.category','cat')
					->addOrderBy('po.isActive', 'DESC')
					->addOrderBy('po.discount','ASC')
					->getQuery()
					->execute();
	}

	/**
	 * @param Promotion $promotion
	 *
	 * @return string
	 */
	public function insertNewPromotion(Promotion $promotion){
		try{
			$this->em->persist($promotion);
			$this->em->flush();
			return $promotion->getTitle().' create successful !';
		} catch (\Exception $e){
			return $e->getMessage();
		}
	}

	/**
	 * @param Promotion $promotion
	 *
	 * @return string
	 */
	public function updatePromotion(Promotion $promotion){
		 try{
		 	$this->em->flush();
		 	return $promotion->getTitle(). ' edit successful!';
		 } catch (\Exception $e){
		 	return $e->getMessage();
		 }
	}

	/**
	 * @param Promotion $promotion
	 *
	 * @return string
	 */
	public function deletePromotion(Promotion $promotion){
		try{
			$this->em->remove($promotion);
			$this->em->flush();
			return $promotion->getTitle().' delete successful!';
		} catch (\Exception $e){
			return $e->getMessage();
		}
	}
}

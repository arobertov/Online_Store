<?php

namespace ShopBundle\Repository;

use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityNotFoundException;
use Doctrine\ORM\EntityRepository;
use http\Exception;
use ShopBundle\Entity\Product;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\NoResultException;
use ShopBundle\Entity\ProductImage;


/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
	/**
	 * @var EntityManagerInterface $em
	 */
	private $em;

	/**
	 * UserRepository constructor.
	 *
	 * @param EntityManagerInterface $em
	 */
	public function __construct(EntityManagerInterface $em ) {
		parent::__construct( $em, new Mapping\ClassMetadata(Product::class) );
		$this->em = $em;
	}

	/**
	 * @param Product $product
	 *
	 * @return string
	 * @throws \Exception
	 */
	public function createNewProduct(Product $product){
		try {
			$em = $this->em;
			$em->persist( $product );
			$em->flush();

			return  $product->getTitle() .' successful created !';
		}catch (\Exception $e){
			throw new \Exception('Error ! :'. $e->getMessage());
		}
	}


	/**
	 * @param Product $product
	 *
	 * @return mixed|string
	 * @throws \Exception
	 */
	public function updateProduct(Product $product){
		try{
			$this->em->flush();

			return $product->getTitle() . ' edit successful !';
		}catch (\Exception $e){
			throw new \Exception($e->getMessage());
		}
	}

	/**
	 * @return mixed|string
	 * @throws \Exception
	 */
	public function findAllProducts(){
		$em = $this->em;
		$query = $em->createQueryBuilder()
			->select('pt','pr')
			->from('ShopBundle:Product','pt')
			->join('pt.category','cat')
			->leftJoin('pt.promotion','pr')
			->orderBy('pt.dateCreated','DESC')
			->getQuery();
		try{
			return $query;
		} catch (\Exception $e){
			throw new \Exception($e->getMessage());
		}

	}

	public function findProductsByCriteria($criteria){
		$cr = Criteria::create()->where($criteria[0]);
		
		$em = $this->em;
		$query = $em->createQueryBuilder()
		            ->select('pt')
		            ->from('ShopBundle:Product','pt')
		            ->where('pt.category=?1')
		            ->setParameter(1,$criteria)
		            ->getQuery()
		;
		return $query->getResult();
	}

	/**
	 * @param $category
	 *
	 * @return \Doctrine\ORM\Query
	 * @throws \Exception
	 */
	public function findProductsByCategory($category){
		try{
			$em = $this->em;
			$query = $em->createQueryBuilder()
			            ->select('pt')
			            ->from('ShopBundle:Product','pt')
			            ->where('pt.category=?1')
			            ->setParameter(1,$category)
			            ->getQuery()
			;
			return $query;
		} catch (\Exception $e){
			throw new \Exception($e->getMessage());
		}
	}


	/**
	 * @param Product $product
	 *
	 * @return string
	 * @throws \Exception
	 */
	public function deleteProduct(Product $product){
		try{
			$this->em->remove($product);
			$this->em->flush();
			return $product->getTitle(). ' delete successful !';
		} catch (NoResultException $e) {
			throw new \Exception($e->getMessage());
		}

	}
}

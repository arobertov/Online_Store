<?php

namespace ShopBundle\Repository;

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use ShopBundle\Entity\Product;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\NoResultException;
use ShopBundle\Entity\ProductImage;


/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
	/**
	 * @var EntityManagerInterface $em
	 */
	private $em;

	/**
	 * UserRepository constructor.
	 *
	 * @param EntityManagerInterface $em
	 */
	public function __construct(EntityManagerInterface $em ) {
		parent::__construct( $em, new Mapping\ClassMetadata(Product::class) );
		$this->em = $em;
	}

	/**
	 * @param Product $product
	 *
	 * @return string
	 * @throws \Exception
	 */
	public function createNewProduct(Product $product){
		try {
			$em = $this->em;
			$em->persist( $product );
			$em->flush();

			return 'Your product successful created !';
		}catch (\Exception $e){
			throw new \Exception('Error ! :'. $e->getMessage());
		}
	}


	/**
	 * @param Product $product
	 *
	 * @return mixed|string
	 * @throws \Exception
	 */
	public function updateProduct(Product $product){
		try{
			$db = $this->em->createQueryBuilder();
			$query = $db->update('ShopBundle:Product','p')
				->set('p.title',':title')
				->where('p.slug = :slug')
				->setParameter('title',$product->getTitle())
				->setParameter('slug',$product->getSlug())
				->getQuery()
			;
			if($query->execute()>0) {
				return $product->getTitle() . ' edit successful !';
			} return $product->getTitle().' cannot edited !';
		}catch (\Exception $e){
			throw new \Exception($e->getMessage());
		}
	}

	/**
	 * @return mixed|string
	 * @throws \Exception
	 */
	public function findAllProducts(){
		$em = $this->em;
		$query = $em->createQueryBuilder()
			->select('pt')
			->from('ShopBundle:Product','pt')
			->join('pt.category','cat')
			->join('pt.promotion','pr')
			->orderBy('pt.dateCreated','DESC')
			->getQuery();
		try{
			return $query->getResult();
		} catch (\Exception $e){
			throw new \Exception($e->getMessage());
		}

	}

	/**
	 * @param Product $product
	 *
	 * @return string
	 * @throws \Exception
	 */
	public function deleteProduct(Product $product){
		try{
			$this->em->remove($product);
			$this->em->flush();
			return $product->getTitle(). ' delete successful !';
		} catch (NoResultException $e) {
			throw new \Exception($e->getMessage());
		}

	}
}
